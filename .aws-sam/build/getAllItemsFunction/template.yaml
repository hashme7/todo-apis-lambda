AWSTemplateFormatVersion: 2010-09-09
Description: >-
  todoapp
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  MongoConnectionString:
    Type: String
    Description: "MongoDB connection string"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs22.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items 
        from a MongoDB collection.
      Environment:
        Variables:
          MONGO_CONNECTION_STRING: !Ref MongoConnectionString
          DATABASE_NAME: todoapp
          COLLECTION_NAME: todos
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs22.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          MONGO_CONNECTION_STRING: !Ref MongoConnectionString
          DATABASE_NAME: todoapp
          COLLECTION_NAME: todos
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
  AddUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/sign-up.signupFunction
      Runtime: nodejs22.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          MONGO_CONNECTION_STRING: !Ref MongoConnectionString
          DATABASE_NAME: todoapp
          COLLECTION_NAME: todos
      Events:
        Api:
          Type: Api
          Properties:
            Path: /signup
            Method: POST
  confirmSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/confirm-signup.confirmSignupFunction
      Runtime: nodejs22.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          MONGO_CONNECTION_STRING: !Ref MongoConnectionString
          DATABASE_NAME: todoapp
          COLLECTION_NAME: todos
      Events:
        Api:
          Type: Api
          Properties:
            Path: /signup-confirm
            Method: POST
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
